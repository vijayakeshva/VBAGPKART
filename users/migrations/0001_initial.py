# Generated by Django 5.2 on 2025-06-17 11:49

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. A valid email address for the user.', max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, error_messages={'unique': 'A user with that phone number already exists.'}, help_text='Phone number in international format (e.g. +919876543210)', max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='phone number')),
                ('user_type', models.CharField(choices=[('PLATFORM', 'Platform User'), ('BUYER', 'Buyer'), ('UNASSIGNED', 'Unassigned')], default='UNASSIGNED', help_text='Designates the type of user account', max_length=10, verbose_name='user type')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('first_name', models.CharField(blank=True, help_text="The user's first name", max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, help_text="The user's last name", max_length=150, verbose_name='last name')),
                ('gender', models.CharField(blank=True, choices=[('MALE', 'Male'), ('FEMALE', 'Female'), ('OTHER', 'Other'), ('PREFER_NOT_TO_SAY', 'Prefer not to say')], help_text='The gender with which the user identifies', max_length=20, null=True, verbose_name='gender')),
                ('date_of_birth', models.DateField(blank=True, help_text="The user's date of birth in YYYY-MM-DD format", null=True, verbose_name='date of birth')),
                ('profile_picture', models.ImageField(blank=True, help_text='A profile picture for the user', null=True, upload_to='user_profiles/%Y/%m/%d/', verbose_name='profile picture')),
                ('email_verified', models.BooleanField(default=False, help_text="Designates whether this user's email has been verified.", verbose_name='email verified')),
                ('phone_verified', models.BooleanField(default=False, help_text="Designates whether this user's phone number has been verified.", verbose_name='phone verified')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, help_text='The date when the user account was created', verbose_name='date joined')),
                ('last_login', models.DateTimeField(blank=True, help_text='The last time this user logged in', null=True, verbose_name='last login')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text="The last time this user's information was updated", verbose_name='last updated')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_type', models.CharField(choices=[('HOME', 'Home'), ('WORK', 'Work'), ('BILLING', 'Billing'), ('SHIPPING', 'Shipping'), ('OTHER', 'Other')], default='HOME', help_text='The type of address (home, work, etc.)', max_length=10, verbose_name='address type')),
                ('is_default', models.BooleanField(default=False, help_text='Designates whether this is the default address for its type', verbose_name='default address')),
                ('full_name', models.CharField(help_text='The full name of the person at this address', max_length=255, verbose_name='full name')),
                ('phone_number', models.CharField(help_text='A contact phone number for this address', max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='phone number')),
                ('company', models.CharField(blank=True, help_text='Company name if this is a business address', max_length=100, null=True, verbose_name='company')),
                ('address_line_1', models.CharField(help_text='The primary street address or PO box', max_length=255, verbose_name='address line 1')),
                ('address_line_2', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='address line 2')),
                ('landmark', models.CharField(blank=True, help_text='A nearby landmark to help locate the address', max_length=100, null=True, verbose_name='landmark')),
                ('city', models.CharField(help_text='The city or locality', max_length=100, verbose_name='city')),
                ('state', models.CharField(help_text='The state, province, or region', max_length=100, verbose_name='state/province/region')),
                ('postal_code', models.CharField(help_text='The postal code or ZIP code', max_length=20, verbose_name='postal code')),
                ('country', models.CharField(default='India', help_text='The country', max_length=100, verbose_name='country')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this address is currently in use', verbose_name='active')),
                ('notes', models.TextField(blank=True, help_text='Special instructions for delivery to this address', null=True, verbose_name='delivery notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this address was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this address was last updated', verbose_name='updated at')),
                ('user', models.ForeignKey(help_text='The user to whom this address belongs', on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL, verbose_name='user account')),
            ],
            options={
                'verbose_name': 'address',
                'verbose_name_plural': 'addresses',
                'ordering': ['-is_default', 'address_type', 'city'],
            },
        ),
        migrations.CreateModel(
            name='BuyerUser',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='buyer_user', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user account')),
                ('tier', models.CharField(choices=[('STANDARD', 'Standard'), ('SILVER', 'Silver'), ('GOLD', 'Gold'), ('PLATINUM', 'Platinum'), ('VIP', 'VIP')], default='STANDARD', help_text="The buyer's loyalty program tier level", max_length=10, verbose_name='tier')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('SUSPENDED', 'Suspended'), ('BLACKLISTED', 'Blacklisted')], default='ACTIVE', help_text='The current status of this buyer account', max_length=15, verbose_name='status')),
                ('lifetime_value', models.DecimalField(decimal_places=2, default=0.0, help_text='Total amount spent by this buyer across all orders', max_digits=12, verbose_name='lifetime value')),
                ('average_order_value', models.DecimalField(decimal_places=2, default=0.0, help_text='The average amount spent per order by this buyer', max_digits=10, verbose_name='average order value')),
                ('order_count', models.PositiveIntegerField(default=0, help_text='Total number of orders placed by this buyer', verbose_name='order count')),
                ('last_order_date', models.DateTimeField(blank=True, help_text='The date when this buyer last placed an order', null=True, verbose_name='last order date')),
                ('first_order_date', models.DateTimeField(blank=True, help_text='The date when this buyer placed their first order', null=True, verbose_name='first order date')),
                ('loyalty_points', models.PositiveIntegerField(default=0, help_text='Current balance of loyalty points', verbose_name='loyalty points')),
                ('loyalty_points_earned', models.PositiveIntegerField(default=0, help_text='Total loyalty points ever earned by this buyer', verbose_name='lifetime loyalty points earned')),
                ('loyalty_points_redeemed', models.PositiveIntegerField(default=0, help_text='Total loyalty points redeemed by this buyer', verbose_name='loyalty points redeemed')),
                ('preferred_payment_method', models.CharField(blank=True, help_text="The buyer's preferred payment method", max_length=50, null=True, verbose_name='preferred payment method')),
                ('preferred_shipping_method', models.CharField(blank=True, help_text="The buyer's preferred shipping method", max_length=50, null=True, verbose_name='preferred shipping method')),
                ('preferred_communication_channel', models.CharField(choices=[('EMAIL', 'Email'), ('SMS', 'SMS'), ('APP', 'Mobile App'), ('WHATSAPP', 'WhatsApp')], default='EMAIL', help_text="The buyer's preferred channel for communications", max_length=20, verbose_name='preferred communication channel')),
                ('newsletter_subscription', models.BooleanField(default=True, help_text='Designates whether this buyer is subscribed to newsletters', verbose_name='newsletter subscription')),
                ('marketing_opt_in', models.BooleanField(default=False, help_text='Designates whether this buyer has opted in to marketing communications', verbose_name='marketing opt-in')),
                ('personalized_ads_opt_in', models.BooleanField(default=False, help_text='Designates whether this buyer has opted in to personalized advertising', verbose_name='personalized ads opt-in')),
                ('account_balance', models.DecimalField(decimal_places=2, default=0.0, help_text="Current balance in the buyer's wallet or account credit", max_digits=10, verbose_name='account balance')),
                ('referral_code', models.CharField(blank=True, help_text='Unique code this buyer can share for referrals', max_length=20, null=True, unique=True, verbose_name='referral code')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this buyer', null=True, verbose_name='internal notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this buyer profile was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this buyer profile was last updated', verbose_name='updated at')),
                ('referred_by', models.ForeignKey(blank=True, help_text='The buyer who referred this account', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.buyeruser')),
            ],
            options={
                'verbose_name': 'buyer user',
                'verbose_name_plural': 'buyer users',
                'ordering': ['-lifetime_value'],
            },
        ),
        migrations.CreateModel(
            name='PlatformUser',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='platform_user', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user account')),
                ('role', models.CharField(choices=[('SUPER_ADMIN', 'Super Administrator'), ('ADMIN', 'Administrator'), ('PRODUCT_MANAGER', 'Product Manager'), ('INVENTORY_MANAGER', 'Inventory Manager'), ('CUSTOMER_SUPPORT', 'Customer Support'), ('MARKETING', 'Marketing Specialist'), ('SALES', 'Sales Representative'), ('ANALYST', 'Business Analyst'), ('CONTENT_MANAGER', 'Content Manager')], default='ADMIN', help_text="The staff member's primary role in the organization", max_length=20, verbose_name='role')),
                ('department', models.CharField(blank=True, help_text='The department to which this staff member belongs', max_length=100, null=True, verbose_name='department')),
                ('employee_id', models.CharField(blank=True, help_text='The official employee identification number', max_length=50, null=True, unique=True, verbose_name='employee ID')),
                ('hire_date', models.DateField(default=django.utils.timezone.now, help_text='The date when this staff member was hired', verbose_name='hire date')),
                ('is_management', models.BooleanField(default=False, help_text='Designates whether this staff member has management responsibilities', verbose_name='management role')),
                ('can_manage_users', models.BooleanField(default=False, help_text='Designates whether this staff can manage user accounts', verbose_name='can manage users')),
                ('can_manage_products', models.BooleanField(default=False, help_text='Designates whether this staff can manage product catalog', verbose_name='can manage products')),
                ('can_manage_orders', models.BooleanField(default=False, help_text='Designates whether this staff can manage customer orders', verbose_name='can manage orders')),
                ('can_manage_content', models.BooleanField(default=False, help_text='Designates whether this staff can manage website content', verbose_name='can manage content')),
                ('can_view_reports', models.BooleanField(default=False, help_text='Designates whether this staff can view business reports', verbose_name='can view reports')),
                ('bio', models.TextField(blank=True, help_text='A short biography or description of the staff member', null=True, verbose_name='biography')),
                ('profile_completed', models.BooleanField(default=False, help_text='Designates whether this staff profile is fully completed', verbose_name='profile completed')),
                ('last_promotion_date', models.DateField(blank=True, help_text='The date when this staff member was last promoted', null=True, verbose_name='last promotion date')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this staff member', null=True, verbose_name='internal notes')),
            ],
            options={
                'verbose_name': 'platform user',
                'verbose_name_plural': 'platform users',
                'ordering': ['user__last_name', 'user__first_name'],
                'indexes': [models.Index(fields=['role'], name='users_platf_role_cf44f1_idx'), models.Index(fields=['department'], name='users_platf_departm_829317_idx'), models.Index(fields=['is_management'], name='users_platf_is_mana_355949_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_user_email_6f2530_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone_number'], name='users_user_phone_n_7fe504_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type'], name='users_user_user_ty_4573bb_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['last_name', 'first_name'], name='users_user_last_na_be362d_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['user'], name='users_addre_user_id_826d51_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['city'], name='users_addre_city_c3605f_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['state'], name='users_addre_state_0a7927_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['postal_code'], name='users_addre_postal__bd26be_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['country'], name='users_addre_country_f5890a_idx'),
        ),
        migrations.AddIndex(
            model_name='buyeruser',
            index=models.Index(fields=['tier'], name='users_buyer_tier_597bcd_idx'),
        ),
        migrations.AddIndex(
            model_name='buyeruser',
            index=models.Index(fields=['status'], name='users_buyer_status_d82241_idx'),
        ),
        migrations.AddIndex(
            model_name='buyeruser',
            index=models.Index(fields=['lifetime_value'], name='users_buyer_lifetim_ca1f91_idx'),
        ),
        migrations.AddIndex(
            model_name='buyeruser',
            index=models.Index(fields=['last_order_date'], name='users_buyer_last_or_562f34_idx'),
        ),
        migrations.AddIndex(
            model_name='buyeruser',
            index=models.Index(fields=['referral_code'], name='users_buyer_referra_7abd6b_idx'),
        ),
    ]
